numericActivity <- as.numeric(as.factor(samsungData$activity))[samsungData$subject ==1]
plot(samsungData[samsungData$subject==1,1],pch=19, col=numericActivity, ylab=names(samsungData)[1])
plot(samsungData[samsungData$subject==1,2],pch=19, col=numericActivity, ylab=names(samsungData)[1])
names(samsungData)[1:12]
data(warpbreaks)
head(warpbreaks)
aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
aov1 <- aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
aov1
aov1$coefficients
aov1$residuals
summary(aov1)
log(0.2)
library(glm2)
data(crabs)
install.packages("glm2")
data(crabs)
library(glm2)
data(crabs)
head(crabs)
aov(crabs$Satellites ~ crabs$Width)
aov1 -> aov(crabs$Satellites ~ crabs$Width)
aov1 <- aov(crabs$Satellites ~ crabs$Width)
aov1
aov1$coefficients
aov1 <- aov(crabs$Width ~ crabs$Satellites)
aov1$coefficients
aov1 <- aov(crabs$Satellites ~ crabs$Width)
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
glm1
glm1$coefficients
summary(glm1)
glm1%fitted
glm1$fitted
head(glm1$fitted.values)
exp(0,164)
?exp
exp(0.164)
exp(0.164)*22
exp(0.164)*23
exp(0.164*23)
exp(0.164)*exp(22)
exp(0.164+22)
0.164 * exp(22)
exp(0.164*22)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
install.packages("MASS ")
install.packages("MASS")
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
library(MASS)
library(mass)
library(MASS)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
aicformula <- step(lm1)
log(0.8)
ln(0.2)
log(0.2)
?Pr
log( 0.2/(1-0.2) )
exp(0.164+22)
exp(0.164+log(22)
)
head(crabs)
library(glm2)
data(crabs)
head(crabs)
detach("package:MASS", unload=TRUE)
head(crabs)
library(glm2)
data(crabs)
head(crabs)
glm(crabs$Satellites ~ crabs$Width, family="Poisson")
glm(crabs$Satellites ~ crabs$Width, family="poisson")
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
plot(glm1$fitted.values)
line(glm1)
exp(3)
0.164*22
summary(glm1$coefficients)
summary(glm1$)
summary(glm1)
exp(-3.30476 + 0.16405)
exp(-3.30476 + 0.16405) *22
exp(22)
summary(glm1)[1]
exp(-3.30476 + 22)
predict (crabs.model, data.frame(Width = c(22)), type = "response")
crabs.model
(-0.4933 ^22 * exp(-22))
((-0.4933 ^22) * exp(0.4933))
((-0.4933 ^22) * exp(0.4933))/
!22
?factoria
?factorial
((-0.4933 ^22) * exp(0.4933))/factorial(22)
exp(1)
?ln
?log
log(exp(3))
-3.30476 +0,16405*22
(-3.30476) + 0,16405*22
0,16405*22 - 3.30476
0.16405*22 - 3.30476
exp(0.30434)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
?glm
summary(trainSA)
glm1 <- glm(chd ~ age, family="binomial", data=trainSA)
missClass = function(trainSA,predict(glm1, type="response")){sum(((predict(glm1, type="response") > 0.5)*1) != trainSA)/length(trainSA)}
?predict
missClass = function(trainSA,predict(glm1, type="response")){sum(((predict(glm1, type="response") > 0.5)*1) != trainSA)/length(trainSA)}
predictSA <- predict(glm1, type="response")
missClass = function(glm1,predictSA){sum(((predictSA > 0.5)*1) != glm1)/length(glm1)}
missClass
summary(missClass)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(glm1, predictSA)
missClass(trainSA$chd, predictSA)
glm1 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
glm2 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=testSA)
missClass(trainSA$chd, predic(glm1, type="response"))
missClass(trainSA$chd, predict(glm1, type="response"))
missClass(testSA$chd, predict(glm2, type="response"))
missClass(testSA$chd, predict(glm1, type="response"))
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newData = data.frame(Palmitic = 1200, Palmitoleic = 120, Stearic=200,Oleic=7000,Linoleic = 900, Linolenic = 32, Arachidic=60,Eicosenoic=6)
5/25
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
sum(p.adjust(pValues, method="bonferroni") < 0.1)
?rnorm
1^2
sqrt(1)
?subset
y1 = subset(y, y<0.9)
y
plot(y)
?order
y = order(y)
plot(y)
y
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
fix(`y1`)
5/55
5/25
0.1/100
sum(pValues < 0.001)
pValues
?sort
sort(pValues)
pValues
pValuesSort <- sprt(pValues)
pValuesSort <- sort(pValues)
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1} else { p[i] = 0}
+ }
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1} else p[i] = 0
+ }
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1 } else p[i] = 0
+ }
for(i in 1:100){
if ( pValuesSort[i] <= (0.1 * (i / 100)))
{ p[i] = 1 } else p[i] = 0
}
p = c(1:100)
c
p
for(i in 1:100){
if ( pValuesSort[i] <= (0.1 * (i / 100)))
{ p[i] = 1 } else p[i] = 0
}
o
p
sum(p)
dim(iris)
names(iris)
str(iris)
attributes(iris)
iris[1:5,]
iris[1:5,2]
iris[1:10, iris.Sepal.Length]
iris[1:10, "Sepal.Length"]
iris[1:10, 1]
summary(iris)
table(iris$Species)
iris$Species[1:10,]
iris$Species[1:10]
iris[1:10, iris$Sepal.Length]
pie(table(iris$Species))
var(iris$Sepal.Length)
?cov
cov(iris$Sepal.Length, iris$Petal.Length)
cor(iris$Sepal.Length, iris$Petal.Length)
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris)
pairs(iris)
library("party")
install.packages("party")
packages(party)
library(party)
str(iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
iris_ctree
plot(iris_ctree)
plot(iris_ctree, type="simple")
newiris <- iris
newiris$Species <- NULL
kc <- kmeans(newiris, 3)
kc
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col = kc$cluster)
points(kc$centers[, c("Sepal.Length", "Sepal.Width")], col = 1:3, pcs=8, cex=2)
points(kc$centers[, c("Sepal.Length", "Sepal.Width")], col = 1:3, pch=8, cex=2)
idx <- sample(1:dim(iris)[1], 40)
warnings()
idx
irisSample <- iris[idc,]
irisSample <- iris[idx,]
irisSample$Species <- NULL
hc <- hclust(dist(irisSample), method="ave")
plot(hc, hang = -1, labels= iris$Species[idx])
library(DMwR)
install.packages("DMwR")
library(DMwR)
iris2 <- iris[,1:4]
outlier.scores <- lofactor(iris2, k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(iris2)
n
labels<-1:n
labels
labels[-outliers] <- "."
labels
biplot(prcomp(iris2), cex =.8, clabs=labels)
warnings()
biplot(prcomp(iris2), cex =.8, xlabs=labels)
?biplot
f <- decompose(AirPassengers)
summary(AirPassengers)
summary(f)
f
?decompose
f$figure
plot(f$figure, type="b", xaxt="n", xlab="")
?decompose
install.packages("ROAuth")
cred = getTwitterOAuth(9KzqfuS1JoVXkH49pR2Pag, rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY)
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
library(ROAuth)
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
install.packages("twitteR")
library(tiwtteR)
library(twitteR)
install.packages("twitteR")
install.packages("twitteR")
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitter("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
library(ROAuth)
library(twitteR)
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8", cainfo="cacert.pem")
?getTwitterOAuth
?rcurl
library(RCurl)
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8", cainfo="cacert.pem")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
3193414
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
registerTwitterOAuth(cred)
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
?rcurl
require("ROAuth")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "6iQZUQpaliLNdcu7b3z67w"
consumerSecret <- "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "http://api.twitter.com/oauth/request_token"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "6iQZUQpaliLNdcu7b3z67w"
consumerSecret <- "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50, cainfo="cacert.pem")
sea <- searchTwitteR('#Twitter', n=50, cainfo="cacert.pem")
?searchTwitteR
?searchTwitter
registerTwitterOAuth(twitCred)
sea <- searchTwitteR('#Twitter', n=50, cainfo="cacert.pem")
sea <- searchTwitteR('witter', n=50, cainfo="cacert.pem")
twitCred$handshake(cainfo = system.file("CurlSSL",
"cacert.pem",
package = "RCurl"))
registerTwitterOAuth(twitCred)
sea <- searchTwitter(✬#twitter✬, n=50)
sea <- searchTwitter('#twitter', n=50)
second(20)
source('D:/Dokumente/RFiles/mycode.R')
second(20)
install.packages(c("boot", "class", "cluster", "digest", "evaluate", "foreign", "formatR", "gdata", "gplots", "highr", "KernSmooth", "lattice", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "nnet", "plyr", "rpart", "spatial", "survival"))
install.packages("devtools")
find_rtools()
library(rtools)
library(devtools)
library(rtools)
find_rtools()
install.packages("KernSmooth")
require(KernSmooth)
setwd("C:/Users/LH/datasciencecoursera")
x <- 4
ckass(x)
class(x)
x <- c(4, "a", TRUE)
class(c)
class(x)
?cbind
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
class(cbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
x
class(x[[2]])
x<-1:4
y <- 2
x+y
x <- c(3,5,1,10,12,6)
x[x<6] = 0
x
x <- c(3,5,1,10,12,6)
x[x<6] == 0
x[x %in% 1:5] <- 0
x
read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
names(x)
x[1:2]
x[1:2,]
tail(x)
x[47,1]
y <- is.na(x[,1])
summary(y)
?mean
mena(x[,1], na.rm=TRUE)
mean(x[,1], na.rm=TRUE)
z <- x[x[,1]> 31 & x[,4] > 90]
z <- x[x[,1]> 31]
z <- x[x[,1]> 31,]
z <- x[x[,1]> 31 & x[,4] > 90,]
mean(z[,2])
z
mean(z[,2], na.rm=TRUE)
mean(z[z[,5]=6,4])
mean(z[z[,5]==6,4])
x[,5]==6
x[x[,5]==6,4]
mean(x[x[,5]==6,4])
max(x[x,5]==5,1)
max(x[x[,5]==5,1])
max(x[x[,5]==5,1], na.rm=TRUE)
y <- c(4, TRUE)
class(y)
y <- list(2, "a", "b", TRUE)
class(y[[1]])
y <- 1:4
y1 <- 2:3
y+y1
class(y+y1)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySprt <- sprt(z-1)
mySprt <- sqrt(z-1)
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(1,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_eq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times= 10)
rep(c(0,1,2), each= 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect <1]
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Lennart")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c(1,2,3), c("X", "Y", "Z"), sep ="")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y,z), 100)
myNA <- is.na(myData)
myNA
myNa <- myData[myData == NA]
myData == NA
sum(myNA)
print(myDAta)
print(myData)
myData
0 / 0
Inf - Inf
