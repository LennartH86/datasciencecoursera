set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
fix(`y1`)
5/55
5/25
0.1/100
sum(pValues < 0.001)
pValues
?sort
sort(pValues)
pValues
pValuesSort <- sprt(pValues)
pValuesSort <- sort(pValues)
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1} else { p[i] = 0}
+ }
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1} else p[i] = 0
+ }
for(i in 1:100){
+     if ( pValuesSort[i] <= (0.1 * (i / 100))) { p[i] = 1 } else p[i] = 0
+ }
for(i in 1:100){
if ( pValuesSort[i] <= (0.1 * (i / 100)))
{ p[i] = 1 } else p[i] = 0
}
p = c(1:100)
c
p
for(i in 1:100){
if ( pValuesSort[i] <= (0.1 * (i / 100)))
{ p[i] = 1 } else p[i] = 0
}
o
p
sum(p)
dim(iris)
names(iris)
str(iris)
attributes(iris)
iris[1:5,]
iris[1:5,2]
iris[1:10, iris.Sepal.Length]
iris[1:10, "Sepal.Length"]
iris[1:10, 1]
summary(iris)
table(iris$Species)
iris$Species[1:10,]
iris$Species[1:10]
iris[1:10, iris$Sepal.Length]
pie(table(iris$Species))
var(iris$Sepal.Length)
?cov
cov(iris$Sepal.Length, iris$Petal.Length)
cor(iris$Sepal.Length, iris$Petal.Length)
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris)
pairs(iris)
library("party")
install.packages("party")
packages(party)
library(party)
str(iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
iris_ctree
plot(iris_ctree)
plot(iris_ctree, type="simple")
newiris <- iris
newiris$Species <- NULL
kc <- kmeans(newiris, 3)
kc
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col = kc$cluster)
points(kc$centers[, c("Sepal.Length", "Sepal.Width")], col = 1:3, pcs=8, cex=2)
points(kc$centers[, c("Sepal.Length", "Sepal.Width")], col = 1:3, pch=8, cex=2)
idx <- sample(1:dim(iris)[1], 40)
warnings()
idx
irisSample <- iris[idc,]
irisSample <- iris[idx,]
irisSample$Species <- NULL
hc <- hclust(dist(irisSample), method="ave")
plot(hc, hang = -1, labels= iris$Species[idx])
library(DMwR)
install.packages("DMwR")
library(DMwR)
iris2 <- iris[,1:4]
outlier.scores <- lofactor(iris2, k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(iris2)
n
labels<-1:n
labels
labels[-outliers] <- "."
labels
biplot(prcomp(iris2), cex =.8, clabs=labels)
warnings()
biplot(prcomp(iris2), cex =.8, xlabs=labels)
?biplot
f <- decompose(AirPassengers)
summary(AirPassengers)
summary(f)
f
?decompose
f$figure
plot(f$figure, type="b", xaxt="n", xlab="")
?decompose
install.packages("ROAuth")
cred = getTwitterOAuth(9KzqfuS1JoVXkH49pR2Pag, rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY)
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
library(ROAuth)
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
install.packages("twitteR")
library(tiwtteR)
library(twitteR)
install.packages("twitteR")
install.packages("twitteR")
cred = getTwitterOAuth("9KzqfuS1JoVXkH49pR2Pag", "rPbjMNOLqoXW68GR1qARDX9RUgOsWGIBeHEmQrkaY")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitter("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
library(ROAuth)
library(twitteR)
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8", cainfo="cacert.pem")
?getTwitterOAuth
?rcurl
library(RCurl)
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8", cainfo="cacert.pem")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
3193414
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
registerTwitterOAuth(cred)
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
?rcurl
require("ROAuth")
cred = getTwitterOAuth("6iQZUQpaliLNdcu7b3z67w", "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "6iQZUQpaliLNdcu7b3z67w"
consumerSecret <- "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "http://api.twitter.com/oauth/request_token"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "6iQZUQpaliLNdcu7b3z67w"
consumerSecret <- "mCsEI2l35r3xIp6IMZq7fGeWHagxSvcKn2MXBNH8"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50)
sea <- searchTwitter('#Twitter', n=50, cainfo="cacert.pem")
sea <- searchTwitteR('#Twitter', n=50, cainfo="cacert.pem")
?searchTwitteR
?searchTwitter
registerTwitterOAuth(twitCred)
sea <- searchTwitteR('#Twitter', n=50, cainfo="cacert.pem")
sea <- searchTwitteR('witter', n=50, cainfo="cacert.pem")
twitCred$handshake(cainfo = system.file("CurlSSL",
"cacert.pem",
package = "RCurl"))
registerTwitterOAuth(twitCred)
sea <- searchTwitter(✬#twitter✬, n=50)
sea <- searchTwitter('#twitter', n=50)
second(20)
source('D:/Dokumente/RFiles/mycode.R')
second(20)
install.packages(c("boot", "class", "cluster", "digest", "evaluate", "foreign", "formatR", "gdata", "gplots", "highr", "KernSmooth", "lattice", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "nnet", "plyr", "rpart", "spatial", "survival"))
install.packages("devtools")
find_rtools()
library(rtools)
library(devtools)
library(rtools)
find_rtools()
install.packages("KernSmooth")
require(KernSmooth)
twitter <- read.csv("twitter.csv", fill = TRUE)
read.csv?
q
?read.csv
twitter <- read.csv("twitter.csv", fill = TRUE, colNames[1])
twitter <- read.csv("twitter.csv", fill = TRUE, colNames=1)
twitter <- read.csv("twitter.csv", fill = TRUE, col.names=1)
twitter <- read.csv("twitter.csv", fill = TRUE, col.names=1, sep = ";")
twitter <- read.csv("twitter.csv", fill = TRUE, sep = ";")
twitter[1]
twitter[1,]
class(twitter$creatdat)
class(twitter$createdat)
head(!is.na(twitter$favoritecount)
)
head(twitter$favoritecount[!is.na(twitter$favoritecount)])
summary(twitter$favoritecount)
summary(twitter$inreplystatusid)
summary(twitter$lang)
head(twitter[!is.na(twitter$geo), c(twitter$geo, twitter$placego)])
head(twitter[!is.na(twitter$geo), c(5,15)])
head(twitter$geo)
head(twitter[!(twitter$geo==""), c(5,15)])
summary(twitter$placecountry)
install.package("tm")
install.packages("tm")
install.packages("langid")
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("langid")
install.packages("textcat")
twitter <- read.csv("twitter.csv", fill = TRUE, sep = ";")
twitter <- read.csv("twitter.csv", fill = TRUE, sep = ";", fileEncoding="UTF-16LE")
twitter <- read.csv("twitter.csv", fill = TRUE, sep = ";")
head(twitter)
textcat(c("This is an english sentence.",
"Das ist ein deutscher satz."))
library(textcat)
textcat(c("This is an english sentence.",
"Das ist ein deutscher satz."))
system.time(testLanguage <- textcat(twitter$text))
head(testLanguage)
?textcat
test <- str_extract(twitter$text[1], "[a..Z]*")
library("stringr", lib.loc="P:/Programme/RStudio/R-3.1.0/library")
test <- str_extract(twitter$text[1], "[a..Z]*")
test
test <- str_extract(twitter$text[1], "[:alnum:]*")
test
test <- str_extract(twitter$text[1], "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]*")
test
test <- str_extract(twitter$text[1], "..........[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]*")
test
test <- textcat("deutsch english")
test
test <- textcat("deutsch")
test
textcat("deutsch speaking")
textcat("deutsch speaking francais")
textcat("Roller Golf with Cameron Diaz! They're so cute ! #CameronDiaz #JimmyFallon\nhttp://t.co/Fq8CStpMFq")
textcat("with Cameron Diaz! They're so cute ! #CameronDiaz #JimmyFallon\nhttp://t.co/Fq8CStpMFq")
test <- str_split("Roller Golf with Cameron Diaz! They're so cute ! #CameronDiaz #JimmyFallon\nhttp://t.co/Fq8CStpMFq", " ")
test
textcat(test)
textcat(test[1])
?sapply
sapply(test, textcat)
set.seed(1)
rpois(5,2)
?qpois
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- 1
x2 <- 2
x1 <- 1
fit <- lm(y ~ x1 + x2)
y <- 2
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof
Rprof()
?Rprof
summaryRprof()
Rprof()
lm(q ~ x1 + x2)
lm(y ~ x1 + x2)
fit <- lm(y ~ x1 + x2)
summaryRprof()
$by.self
Rprof(NULL)
summary(Rprof())
summaryRprof
summaryRprof()
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
?rnorm
r <- rnorm(100)
head(r)
p <- pnorm(100)
head(p)
p <- pnorm(c(0.25, 0.75))
p
p <- pnorm(c(0.25, 0.75), sd= 4)
p
pnorm(0)
pnorm(1)
pnorm(0, mean = 2)
pnorm(-1)
plot(rnorm(100))
?write.table
names(twitter)
textLanguage <- textcat(twitter$text, p = textcat::ECIMCI_profiles)
library(textcat)
textLanguage <- textcat(twitter$text, p = textcat::ECIMCI_profiles)
sample(1000, 1:480000)
?sample
test <- sample(1:480000, 1000)
head(test)
textAndLang[, 1] <- twitter$text[test]
textAndLang <- data.frame(ncol ?=2)
textAndLang <- data.frame(ncol =2)
textAndLang[, 1] <- twitter$text[test]
textAndLang["text"] <- twitter$text[test]
count(test)
length(test)
textAndLang <- rbind(twitter$text[test], textLanguage[test])
head(textAndLang)
textAndLang <- cbind(twitter$text[test], textLanguage[test])
head(textAndLang)
twitter$text[1]
twitter$text[test[1]]
head(twitter$text[test])
test1 <- twitter$text[test]
head(test1)
textAndLang <- cbind(test1, textLanguage[test])
head(textAndLang)
textAndLang[,1] <- test1
head(textAndLang)
head(test1)
head(textAndLang[,])
head(textAndLang[,1])
head(textAndLang[,2])
names(textAndLang) <- c("text", "lang")
head(textAndLang[,2])
head(textAndLang)
names(textAndLang)
?cbind
textAndLang <- 0
textAndLang <- data.frame()
textAndLang["text"] <- ""
textAndLang
?data.frame
textAndLang["text"] <- 0
textAndLang$text <- ""
?bind
?rbind
textAndLang <- rbind(twitter$text[test], textLanguage[test])
twitter$text[test][1]
test[1]
as.numeric(twitter$text[test][1])
textAndLang <- rbind(as.character(twitter$text[test]), textLanguage[test])
head(testAndLang)
head(textAndLang)
textAndLang <- cbind(as.character(twitter$text[test]), textLanguage[test])
head(textAndLang)
textAndLang
names(twitter)
twitter["textcatLang"] <- textLanguage
names(twitter)
head(twitter$textcatLang)
summary(twitter$textcatLang)
str(twitter$textcatLang)
twitterLangAnalysis <- cbind(twitter$text, twitter$lang, twitter$placecountry, twitter$placecountrycode, twitter$placefullname, twitter$placename, twitter$placestring, twitter$placetyp, twitter$placeurl, twitter$userlang, twitter$userlocation, twitter$usertimezone, twitter$textcatLang)
names(twitterLangAnalysis)
head(twitterLangAnalysis)
class(twitter$text)
install.packages("party")
library(party)
library(dataset)
library(datasets)
data(iris)
str(iris)
itis_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
print(itis_ctree)
plot(itis_ctree)
index <- sample(2, nrow(twitter), replace= FALSE, prob=c(0.7,0.3))
index <- sample(2, nrow(twitter), replace= TRUE, prob=c(0.7,0.3))
?sample
names(twitter)
head(twitter$userlang)
twitter$userlang <- as.character(twitter$userlang)
head(twitter$userlang)
twitter["userIsTextLang"] <- ""
twitter["userIsTextLang"] <- FALSE
for (i in 1:nrow(twitter)) { if (twitter$userlang[i] == twitter$textcatLang[i]) { twitter$userIsTextLang[i] <- TRUE}}
summary(twitter$userIsTextLang)
?chmatch
library("stringr", lib.loc="P:/Programme/RStudio/R-3.1.0/library")
?chmatch
install.packages("data.table")
library("data.table", lib.loc="P:/Programme/RStudio/R-3.1.0/library")
?chmatch
test <- chmatch(twitter$userIsTextLang, twitter$userlang, nomatch=FALSE)
test <- chmatch(twitter$textcatLang, twitter$userlang, nomatch=FALSE)
summary(test)
head(test)
str(test)
test <- chmatch(twitter$textcatLang, twitter$userlang)
head(test)
summary(test)
max(test)
test[500:550]
summary(twitter$userlang)
str(twitter$userlang)
any(is.na(twitter$userlang))
any(is.na(twitter$textcatLang))
summary(twitter$textcatLang)
test <- twitter$textcatLang[is.na(twitter$textcatLang)]
summary(test)
twitter <- read.csv("twitter.csv", fill = TRUE, sep = ";")
textLanguage <- textcat(twitter$text, p = textcat::ECIMCI_profiles)
twitterLang <- read.csv("twitter_lang.txt", fill = TRUE, sep = " ")
library("textcat", lib.loc="P:/Programme/RStudio/R-3.1.0/library")
textLanguage <- textcat(twitter$text, p = textcat::ECIMCI_profiles)
head(twitter)
head(twitter[,c(1,3)])
names(twitter)
userDescriptionLanguage <- textcat(twitter$userdescription, p = textcat::ECIMCI_profiles)
save.image("D:/Dokumente/RFiles/Twitter-Mining.RData")
twitterLang <- twitter[,c(1,5, 11, 12. 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 28, 32)]
twitterLang <- twitter[, c(1,5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 28, 32)]
names(twitterLang)
twitterLang$textLanguage <- textLanguage
twitterLang$userDescriptionLanguage <- userDescriptionLanguage
names(twitterL)
names(twitterLang)
write.table(twitterLang, "twitter_lang.txt", sep=";")
test <- read.table(twitter_lang.txt, sep=";")
test <- read.table("twitter_lang.txt", sep=";")
test <- read.table("twitter_lang.txt", sep=";", fill=TRUE)
?write.table
write.table(twitterLang, "twitter_lang.txt", sep=";")
test <- read.table("twitter_lang.txt", sep=";", fill=TRUE)
write.table(twitterLang, "twitter_lang.txt", sep=";", row.names=FALSE)
test <- read.table("twitter_lang.txt", sep=";", fill=TRUE)
write.table(twitterLang, "twitter_lang.txt", sep=";")
test1 <- read.table("twitter_lang.txt", sep=";", fill=TRUE, row.names=NULL)
head(test1)
write.table(twitterLang, "twitter_lang.txt", sep=";", row.names=FALSE)
save.image("D:/Dokumente/RFiles/Twitter-Mining.RData")
setwd("C:/Users/LH/datasciencecoursera/R Programming/ProgrammingAssignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
names(outcome)
class(outcome[,19])
source('C:/Users/LH/datasciencecoursera/R Programming/ProgrammingAssignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('C:/Users/LH/datasciencecoursera/R Programming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('C:/Users/LH/datasciencecoursera/R Programming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
